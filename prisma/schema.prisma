generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
  output   = "../src/database/kysely"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid()) @db.Uuid
  url             String   @unique
  provider        String
  providerId      String
  email           String
  name            String   @unique
  image           String?
  description     String   @default("")
  backgroundImage String?
  links           String[] @default([])
  followerCount   Int      @default(0)
  subscription    String[] @default(["FOLLOW", "FEED_LIKE", "FEED_COMMENT", "FEED_REPLY", "POST_COMMENT", "POST_REPLY"])

  createdAt DateTime @default(now())

  followers           Follow[]          @relation("following")
  followings          Follow[]          @relation("follower")
  feeds               Feed[]
  feedLikes           Like[]
  feedComments        FeedComment[]     @relation("FeedCommentWrite")
  feedSaves           Save[]
  feedCommentMentions FeedComment[]     @relation("MentionedUser")
  feedCommentLikes    FeedCommentLike[]
  posts               Post[]
  postLikes           PostLike[]
  postSaves           PostSave[]
  postComments        PostComment[]     @relation("PostCommentWrite")
  postCommentMentions PostComment[]     @relation("MentionedUser")
  postCommentLike     PostCommentLike[]
  refreshToken        RefreshToken[]
  albums              Album[]
  chatUsers           ChatUser[]
  pushTokens          PushToken[]

  @@unique([provider, providerId])
}

model Follow {
  followerId  String   @db.Uuid
  followingId String   @db.Uuid
  createdAt   DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followingId])
}

model Feed {
  id        String   @id @default(uuid()) @db.Uuid
  authorId  String   @db.Uuid
  title     String
  cards     String[]
  thumbnail String
  createdAt DateTime @default(now())
  viewCount Int      @default(0)
  likeCount Int      @default(0)
  content   String   @default("")
  albumId   String?  @db.Uuid
  tags      Tag[]

  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments FeedComment[]
  saves    Save[]
  album    Album?        @relation(fields: [albumId], references: [id], onDelete: SetNull)

  @@index([authorId, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([albumId])
}

model Tag {
  feedId  String @db.Uuid
  tagName String

  feed Feed @relation(fields: [feedId], references: [id], onDelete: Cascade)

  @@id([feedId, tagName])
  @@index([tagName])
}

model Like {
  userId    String   @db.Uuid
  feedId    String   @db.Uuid
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  feed Feed @relation(fields: [feedId], references: [id], onDelete: Cascade)

  @@id([userId, feedId])
  @@index([feedId])
}

model Save {
  userId    String   @db.Uuid
  feedId    String   @db.Uuid
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  feed Feed @relation(fields: [feedId], references: [id], onDelete: Cascade)

  @@id([userId, feedId])
}

model FeedComment {
  id              String   @id @default(uuid()) @db.Uuid
  feedId          String   @db.Uuid
  writerId        String   @db.Uuid
  parentId        String?  @db.Uuid
  content         String
  mentionedUserId String?  @db.Uuid
  createdAt       DateTime @default(now())
  likeCount       Int      @default(0)

  writer        User              @relation("FeedCommentWrite", fields: [writerId], references: [id], onDelete: Cascade)
  feed          Feed              @relation(fields: [feedId], references: [id], onDelete: Cascade)
  parent        FeedComment?      @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)
  childComments FeedComment[]     @relation("ChildComments")
  mentionedUser User?             @relation("MentionedUser", fields: [mentionedUserId], references: [id], onDelete: SetNull)
  likes         FeedCommentLike[]

  @@index([feedId])
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  link      String
  image     String?
  message   String

  @@index([userId, createdAt(sort: Desc)])
}

model FeedCommentLike {
  feedCommentId String @db.Uuid
  userId        String @db.Uuid

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedComment FeedComment @relation(fields: [feedCommentId], references: [id], onDelete: Cascade)

  @@id([feedCommentId, userId])
}

model Post {
  id           String   @id @default(uuid()) @db.Uuid
  authorId     String   @db.Uuid
  title        String
  content      String
  type         Int      @db.SmallInt
  thumbnail    String?
  createdAt    DateTime @default(now())
  viewCount    Int      @default(0)
  commentCount Int      @default(0)

  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes    PostLike[]
  saves    PostSave[]
  comments PostComment[]

  @@index([authorId, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([type(sort: Asc), createdAt(sort: Desc)])
}

model PostLike {
  postId String @db.Uuid
  userId String @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model PostSave {
  postId    String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model PostComment {
  id              String   @id @default(uuid()) @db.Uuid
  postId          String   @db.Uuid
  writerId        String?  @db.Uuid
  parentId        String?  @db.Uuid
  content         String
  mentionedUserId String?  @db.Uuid
  createdAt       DateTime @default(now())
  likeCount       Int      @default(0)
  isDeleted       Boolean  @default(false)

  writer        User?             @relation("PostCommentWrite", fields: [writerId], references: [id], onDelete: SetNull)
  post          Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent        PostComment?      @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)
  childComments PostComment[]     @relation("ChildComments")
  mentionedUser User?             @relation("MentionedUser", fields: [mentionedUserId], references: [id], onDelete: SetNull)
  likes         PostCommentLike[]

  @@index([postId, createdAt(sort: Asc)])
}

model PostCommentLike {
  postCommentId String @db.Uuid
  userId        String @db.Uuid

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  postComment PostComment @relation(fields: [postCommentId], references: [id], onDelete: Cascade)

  @@id([postCommentId, userId])
}

model Report {
  id        String   @id @default(uuid()) @db.Uuid
  type      String
  userId    String   @db.Uuid
  refType   String
  refId     String   @db.Uuid
  content   String?
  createdAt DateTime @default(now())
}

model RefreshToken {
  userId    String   @db.Uuid
  token     String
  updatedAt DateTime @default(now())
  type      String
  device    String
  model     String
  ip        String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, token])
}

model Album {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  name   String
  order  Int

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  feeds Feed[]

  @@index([userId])
}

model Chat {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())

  messages ChatMessage[]
  users    ChatUser[]

  @@index([createdAt(sort: Desc)])
}

model ChatMessage {
  id        String   @id @default(uuid()) @db.Uuid
  chatId    String   @db.Uuid
  userId    String   @db.Uuid
  content   String?
  image     String?
  createdAt DateTime @default(now())
  replyToId String?  @db.Uuid
  isLike    Boolean  @default(false)

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId, createdAt(sort: Asc)])
}

model ChatUser {
  chatId      String    @db.Uuid
  userId      String    @db.Uuid
  unreadCount Int       @default(0)
  enteredAt   DateTime?
  exitedAt    DateTime?

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatId, userId])
  @@index([userId])
}

model PushToken {
  userId    String   @db.Uuid
  deviceId  String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, deviceId])
}

model AppVersion {
  version   String   @id
  createdAt DateTime @default(now())
}
